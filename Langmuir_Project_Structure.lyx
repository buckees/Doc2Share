#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{tikz}
\usetikzlibrary{matrix,shapes}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Langmuir Project Design
\end_layout

\begin_layout Author
Wei Tian
\end_layout

\begin_layout Date
12/18/2020
\end_layout

\begin_layout Standard
The Langmuir project is designed for ....
\end_layout

\begin_layout Standard
This project design will focus on the modules
\end_layout

\begin_layout Standard
The project design is based on the modeling of the physics and cannot go
 beyond it.
 In order to well design the project structure, the models need to be analyzed
 in details.
\end_layout

\begin_layout Standard
Let's see the particle-based models first.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Clss Particle()
\end_layout

\begin_layout Plain Layout

-- attribute --
\end_layout

\begin_layout Plain Layout

	self.name: str
\end_layout

\begin_layout Plain Layout

	self.type: str, one of('Eon', 'Ion', 'Neut')
\end_layout

\begin_layout Plain Layout

	self.charge: float, unit in C
\end_layout

\begin_layout Plain Layout

	self.mass: float, unit in AMU
\end_layout

\begin_layout Plain Layout

	self.position: float array(3), unit in m
\end_layout

\begin_layout Plain Layout

	self.speed: float, unit in m/s
\end_layout

\begin_layout Plain Layout

	or self.erg: float, unit in eV
\end_layout

\begin_layout Plain Layout

	or self.vel: float array(3) unit in m/s
\end_layout

\begin_layout Plain Layout

	self.uvec: float array(3), unitless, normalized velocity
\end_layout

\begin_layout Plain Layout

	or self.ang: float array(2), theta and phi
\end_layout

\begin_layout Plain Layout

	self.accl: float array(3), unit in m/s**2, acceleration
\end_layout

\begin_layout Plain Layout

	self.isAlive: bool, state of particle
\end_layout

\begin_layout Plain Layout

-- method --
\end_layout

\begin_layout Plain Layout

	self.initParticle()
\end_layout

\begin_layout Plain Layout

	self.initPosition()
\end_layout

\begin_layout Plain Layout

	self.initSpeed(imode)
\end_layout

\begin_layout Plain Layout

	self.initEnergy(imode)
\end_layout

\begin_layout Plain Layout

		# imode: str, determines the distribution such as Uniform, Normal and
 Cosine.
\end_layout

\begin_layout Plain Layout

	self.move(dL, imode='Space')
\end_layout

\begin_layout Plain Layout

		# dL: float, unit in m, spacestep for a move
\end_layout

\begin_layout Plain Layout

		# imode: str
\end_layout

\begin_layout Plain Layout

		# move in a spacestep, with no field, 
\end_layout

\begin_layout Plain Layout

		# that is self.accl = (0.0, 0.0, 0.0), used in Feature Model.
\end_layout

\begin_layout Plain Layout

	or self.move(dt, EF, imode='Normal')
\end_layout

\begin_layout Plain Layout

		# dt: float, unit in s, timestep for a move
\end_layout

\begin_layout Plain Layout

		# EF: float array(3), unit in V/m, E-Field
\end_layout

\begin_layout Plain Layout

		# move in timestep, with E-field, 1st order accuracy.
\end_layout

\begin_layout Plain Layout

		# used in EEDF Model, or Feature Model with E-field on.
\end_layout

\begin_layout Plain Layout

	or self.move(dt, EF, imode='leapfrog')
\end_layout

\begin_layout Plain Layout

		# dt: float, unit in s, timestep for a move
\end_layout

\begin_layout Plain Layout

		# EF: float array(3), unit in V/m, E-Field
\end_layout

\begin_layout Plain Layout

		# move in timestep, with time-varying E-field or B-field, 
\end_layout

\begin_layout Plain Layout

		# 2nd order accurary, able to track the oscillating motion.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
self.move() is the key method for a particle.
 Depending on the field, best algorithm needs to be chosen for required
 accurary and speed.
 
\end_layout

\begin_layout Standard
Feature Model needs intensive information for mesh, while Sheath Model and
 EEDF Model do not.
\end_layout

\begin_layout Standard
Feature Model mesh class is designed as
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Class Mesh()
\end_layout

\begin_layout Plain Layout

-- attribute --
\end_layout

\begin_layout Plain Layout

	self.name: str
\end_layout

\begin_layout Plain Layout

	self.domain: float array(6), unit in m, (top, bottom, left, right, front,
 back)
\end_layout

\begin_layout Plain Layout

	self.res: float array(3), unit in m, resolution in structured mesh
\end_layout

\begin_layout Plain Layout

	self.ngrid: int array(3), num of nodes in structured mesh
\end_layout

\begin_layout Plain Layout

	self.x, self.z, self.y: float array(m,n), unit in m, coordinates in axis x,
 z, y
\end_layout

\begin_layout Plain Layout

	self.mat: int array(m,n), material number, vacuum = 0 by default
\end_layout

\begin_layout Plain Layout

	self.matDict: dictionary to map material number to material name
\end_layout

\begin_layout Plain Layout

	self.surf: int array(m,n), indicator for surface nodes
\end_layout

\begin_layout Plain Layout

		# 0: non-surf node
\end_layout

\begin_layout Plain Layout

		# 1: surf node in material
\end_layout

\begin_layout Plain Layout

		# -1: surf node in vacuum
\end_layout

\begin_layout Plain Layout

-- method --
\end_layout

\begin_layout Plain Layout

	self.initMesh()
\end_layout

\begin_layout Plain Layout

	self.readMesh()
\end_layout

\begin_layout Plain Layout

	self.addShape(ishape='Rectangle', 'Triangle' or 'Circle')
\end_layout

\begin_layout Plain Layout

	or self.addRectangle(), self.addTriangle() and self.addCircle()
\end_layout

\begin_layout Plain Layout

	self.find_surf(): assign values to self.surf
\end_layout

\begin_layout Plain Layout

	self.saveMesh()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This mesh class can be shared by all mesh-based models, such as Feature
 Model and Fluid Model.
\end_layout

\begin_layout Standard
This mesh class will support read-in function so that it enables restart
 capability for Sheath Model.
\end_layout

\begin_layout Standard
In Feature Model, mesh evolution is the key so that mesh needs more methods.
 Let's create a FeatMesh class to inheritate generic Mesh class.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Class FeatMesh(Mesh): FeatMesh inheritates all attributes and methods from
 Mesh
\end_layout

\begin_layout Plain Layout

-- attribute --
\end_layout

\begin_layout Plain Layout

	self.surfNorm: list of float array(3) store all surface normal along the
 surface
\end_layout

\begin_layout Plain Layout

-- method --
\end_layout

\begin_layout Plain Layout

	self.checkHit(Particle.position)
\end_layout

\begin_layout Plain Layout

		# the position of the particle is passed to checkHit()
\end_layout

\begin_layout Plain Layout

		# position in continuous space is mapped to meshgrid
\end_layout

\begin_layout Plain Layout

		# position --> index
\end_layout

\begin_layout Plain Layout

		# check the material of the index
\end_layout

\begin_layout Plain Layout

		# if self.mat[index] != 0, it is a hit
\end_layout

\begin_layout Plain Layout

	self.calcSurfNorm(global or local)
\end_layout

\begin_layout Plain Layout

		# calculate the surface normal either globally or for a given node
\end_layout

\begin_layout Plain Layout

	self.updateMat(index, newMat)
\end_layout

\begin_layout Plain Layout

		# change the mat at index to newMat
\end_layout

\begin_layout Plain Layout

		# to protect the self.mat, we define a method to explicitly
\end_layout

\begin_layout Plain Layout

		# change the material
\end_layout

\begin_layout Plain Layout

	self.findFloatChell()
\end_layout

\begin_layout Plain Layout

		# find the floating cells which are detached from surface
\end_layout

\begin_layout Plain Layout

		# the algorithm is not determined yet
\end_layout

\begin_layout Plain Layout

	self.dropFloatCell(imode='Remove' or 'Drop')
\end_layout

\begin_layout Plain Layout

		# process floating cells
\end_layout

\begin_layout Plain Layout

		# imode='Remove': Remove floating cells, change mat to zero
\end_layout

\begin_layout Plain Layout

		# imode='Drop': Drop floating cells to bottom, like deposition
\end_layout

\end_inset


\end_layout

\begin_layout Standard
checkHit() is placed under FeatMesh() class instead of Particle() because
 checkHit() is more associated to Mesh than Particle.
\end_layout

\end_body
\end_document
